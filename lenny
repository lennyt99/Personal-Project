@author: ltellez
"""

import os
import smtplib
import imghdr
from email.message import EmailMessage
import yfinance as yf
import datetime as dt
import pandas as pd
from pandas_datareader import data as pdr
import time
import numpy as np 
import statsmodels.formula.api as sm # module for stats models
from statsmodels.iolib.summary2 import summary_col # module for presenting stats models outputs nicely
from pathlib import Path
import sys


# %%
def price2ret(prices, retType ='simple'):
    if retType == 'simple':
        ret = (prices/prices.shift(1))-1
    else:
        ret = np(prices/prices.shift(1))
    return ret

def assetPriceReg(df_stk):
    import pandas_datareader.data as web  # module for reading datasets directly from the web
    
    # Reading in factor data
    df_factors = web.DataReader('F-F_Research_Data_5_Factors_2x3_daily', 'famafrench')[0]
    df_factors.rename(columns={'Mkt-RF':'MKT'}, inplace=True)
    df_factors['MKT']=df_factors['MKT']/100
    df_factors['SMB']=df_factors['SMB']/100
    df_factors['HML']=df_factors['HML']/100
    df_factors['RMW']=df_factors['RMW']/100
    df_factors['CMA']=df_factors['CMA']/100
    
    df_stock_factor = pd.merge(df_stk,df_factors,left_index=True,right_index=True) # Merging the stock and factor returns dataframes together
    df_stock_factor['XsRet'] = df_stock_factor['Returns'] - df_stock_factor['RF'] # Calculating excess returns

    # Running CAPM, FF3, and FF5 models.
    CAPM = sm.ols(formula= 'XsRet ~ MKT', data=df_stock_factor).fit(cov_type='HAC',cov_kwds={'maxlags':1})
    FF3 = sm.ols(formula= 'XsRet ~ MKT + SMB + HML', data=df_stock_factor).fit(cov_type='HAC',cov_kwds={'maxlags':1})
    FF5 = sm.ols(formula= 'XsRet ~ MKT + SMB + HML + RMW + CMA', data=df_stock_factor).fit(cov_type='HAC',cov_kwds={'maxlags':1})

    CAPMtstat = CAPM.tvalues
    FF3tstat = FF3.tvalues
    FF5tstat = FF5.tvalues

    CAPMcoeff = CAPM.params
    FF3coeff = FF3.params
    FF5coeff = FF5.params

    # DataFrame with coefficients and t-stats
    results_df = pd.DataFrame({'CAPMcoeff':CAPMcoeff,'CAPMtstat':CAPMtstat,
                               'FF3coeff':FF3coeff, 'FF3tstat':FF3tstat,
                               'FF5coeff':FF5coeff, 'FF5tstat':FF5tstat},
    index = ['Intercept', 'MKT', 'SMB', 'HML', 'RMW', 'CMA'])

    
    dfoutput = summary_col([CAPM,FF3, FF5],stars=True,float_format='%0.4f',
                  model_names = ['CAPM','FF3','FF5'],
                  info_dict = {'N':lambda x:"{0:d}".format(int(x.nobs)),
                             'Adjusted R2':lambda x: "{:.4f}".format(x.rsquared_adj)}, 
                             regressor_order = ['Intercept', 'MKT', 'SMB', 'HML', 'RMW', 'CMA'])

    print(dfoutput)
    
    return results_df
# %%

home = str(Path.home())
print(home)


# %%

if sys.platform == 'linux':
    inputDir = '/datasets/stocks/' 
elif sys.platform == 'win32':
    inputDir = '\\datasets\stocks\\' 
else :
    inputDir = '/datasets/stocks/'
    
    
fullDir = home+inputDir
print(fullDir)
ba_y =  pd.read_csv('C:\\Users\\lenny\\Fin510'",index_col='Date',parse_dates=True)
df_stk1 = ba_y

# %% Parse Date ba_wsj
data_files = os.listdir('C:\\Users\\lenny\\Fin510')
data_files

for filename in data_files:
    # Read data from each file
    df = pd.read_csv(f'C:\\Users\\Lenny\\Fin510/{filename}', index_col='Date',parse_dates=True)
 
print(df_stock_factor['compare'])

# %% Change stkName
stock = ["TSLA", "GME", "JPM", "stop"]
for sd in stock:
    if sd == "JPM":
        break
    stkName = (sd)
fileName = 'stk_' + stkName + '.csv'
readFile = fullDir+fileName  

#%%

EMAIL_ADDRESS = os.environ.get('lennyttr@gmail.com')
EMAIL_PASSWORD = os.environ.get('cbhayuwwpwsxgu')

msg = EmailMessage()

yf.pdr_override()
start =dt.datetime(2022,1,1)
now = dt.datetime.now()

stock="TSLA"
TargetPrice=1000

msg["Subject"]= "Alert on " +stock
msg["From"]=EMAIL_ADDRESS
msg["To"]='ltellez@uark.edu'

alerted=False

while 1:

	df= pdr.get_data_yahoo(stock, start, now)
	currentClose=df["Adj Close"][-1]

	condition=currentClose>TargetPrice

	if(condition and alerted==False):

		alerted=True

		message= stock +"Has activated the alert price of "+ str(TargetPrice) +\
		 "\nCurrent Price: "+str(currentClose)

		msg.set_content(message)
        
		with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
		    smtp.login(EMAIL_ADDRESS,EMAIL_PASSWORD)
		    smtp.send_message(msg)

		    print("completed") 
            
else:
        print("no new alerts")
time.sleep(600)
